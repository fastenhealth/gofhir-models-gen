// Copyright 2022 - Fasten Health
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package utils

import (
	"encoding/json"
	"fmt"
	fhir "github.com/fastenhealth/gofhir-models-gen/fhir"
)

// THIS FILE IS GENERATED BY https://github.com/fastenhealth/gofhir-models-gen
// PLEASE DO NOT EDIT BY HAND

func MapToResource(resourceRawJson json.RawMessage, asPointer bool) (interface{}, error) {
	var partial map[string]interface{}
	err := json.Unmarshal(resourceRawJson, &partial)
	if err != nil {
		return nil, err
	}
	rt, rtOk := partial["resourceType"]
	if !rtOk {
		return nil, fmt.Errorf("could not determine resourceType")
	}
	switch rt {
	case "Bundle":
		x := fhir.Bundle{}
		uerr := json.Unmarshal(resourceRawJson, &x)
		if asPointer {
			return &x, uerr
		} else {
			return x, uerr
		}
	case "CodeSystem":
		x := fhir.CodeSystem{}
		uerr := json.Unmarshal(resourceRawJson, &x)
		if asPointer {
			return &x, uerr
		} else {
			return x, uerr
		}
	case "StructureDefinition":
		x := fhir.StructureDefinition{}
		uerr := json.Unmarshal(resourceRawJson, &x)
		if asPointer {
			return &x, uerr
		} else {
			return x, uerr
		}
	case "ValueSet":
		x := fhir.ValueSet{}
		uerr := json.Unmarshal(resourceRawJson, &x)
		if asPointer {
			return &x, uerr
		} else {
			return x, uerr
		}
	default:
		return nil, fmt.Errorf("could not decode resource")
	}
}
